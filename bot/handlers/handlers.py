from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
import logging

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è.
from bot.services.catalog import get_flower_list, get_flower_details
from bot.services.orders import add_item_to_cart, get_cart_details, create_order
from bot.services.notifications import send_order_notification  # —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboardMarkup)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìã –ö–∞—Ç–∞–ª–æ–≥" ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã
@router.message(lambda message: message.text == "üìã –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    flowers = await get_flower_list()  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏: 'id', 'name', 'price'
    text = "<b>–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥</b>:\n\n"
    buttons = []
    for flower in flowers:
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –º–µ–Ω—å—à–µ —É—Å–∏–ª–∏–π.
        button_text = f"{flower['name']} ‚Äî {flower['price']} —Ä—É–±."
        callback_data = f"select_flower:{flower['id']}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫–∏)
@router.callback_query(lambda callback: callback.data.startswith("select_flower:"))
async def flower_selected(callback: types.CallbackQuery):
    flower_id = int(callback.data.split(":")[1])
    flower = await get_flower_details(flower_id)  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: 'id', 'name', 'price', 'description'
    text = (
        f"<b>{flower['name']}</b>\n"
        f"üí∞ {flower['price']} —Ä—É–±.\n\n"
        f"{flower.get('description', '')}"
    )
    buttons = [
        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{flower['id']}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    logging.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞:\n%s", text)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (—á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫—É)
@router.callback_query(lambda callback: callback.data.startswith("add_to_cart:"))
async def add_to_cart_handler(callback: types.CallbackQuery):
    flower_id = int(callback.data.split(":")[1])
    await add_item_to_cart(callback.from_user.id, flower_id)
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="show_cart")],
        [InlineKeyboardButton(text="üè† –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("‚úÖ –ë—É–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã (—á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫—É)
@router.callback_query(lambda callback: callback.data == "show_cart")
async def show_cart_handler(callback: types.CallbackQuery):
    result = await get_cart_details(callback.from_user.id)
    if result is None:
        await callback.message.answer("üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
    else:
        details, total = result
        text = "<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã</b>:\n\n"
        for item in details:
            text += f"{item['flower_name']} x {item['quantity']} ‚Äî {item['total']} —Ä—É–±.\n"
        text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±."
        await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫—É)
@router.callback_query(lambda callback: callback.data == "main_menu")
async def main_menu_handler(callback: types.CallbackQuery):
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äì –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫—É)
@router.callback_query(lambda callback: callback.data == "checkout")
async def checkout_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-02-15 18:30) –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é)
@router.message(lambda message: "," in message.text)
async def process_delivery_info(message: types.Message):
    try:
        parts = message.text.split(",", 1)
        delivery_datetime = parts[0].strip()
        delivery_address = parts[1].strip()
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
        order = await create_order(message.from_user.id, delivery_datetime, delivery_address)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞
        await send_order_notification(order, delivery_datetime, delivery_address)
        await message.answer(
            f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.order_key}.\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_datetime}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
